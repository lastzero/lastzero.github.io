<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Best Practices Amp Quality on Liquid Bytes - Software Engineering &amp; Management Blog</title>
    <link>https://blog.liquidbytes.net/categories/best-practices-amp-quality/</link>
    <description>Recent content in Best Practices Amp Quality on Liquid Bytes - Software Engineering &amp; Management Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>You are free to share</copyright>
    <lastBuildDate>Sat, 21 Nov 2015 05:39:16 +0000</lastBuildDate>
    
	<atom:link href="https://blog.liquidbytes.net/categories/best-practices-amp-quality/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Why less mocking can improve everyone’s testing experience</title>
      <link>https://blog.liquidbytes.net/2015/11/mocks-are-evil/</link>
      <pubDate>Sat, 21 Nov 2015 05:39:16 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2015/11/mocks-are-evil/</guid>
      <description>There&amp;#8217;s some confusion in the community concerning the use of mocks for unit testing. Mocking is creating objects that simulate the behaviour of real objects. I personally don&amp;#8217;t mock class dependencies by default but use real objects and test doubles via dependency injection.
Despite the success of this approach, many developers are still plagued by concerns that the resulting tests are just some sort of component or integration tests and not true unit tests.</description>
    </item>
    
    <item>
      <title>Form Validation vs Model Validation</title>
      <link>https://blog.liquidbytes.net/2015/11/form-validation-vs-model-validation/</link>
      <pubDate>Sun, 15 Nov 2015 06:28:07 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2015/11/form-validation-vs-model-validation/</guid>
      <description>This is a follow-up on Why I’m using a separate layer for input data validation that explains the key differences between client-side, input value (form) and model validation.
In general, model validation operates on trusted data (internal system state) and should ideally be repeatable at any point in time while input validation explicitly operates once on data that comes from untrusted sources (depending on the use case and user privileges).</description>
    </item>
    
    <item>
      <title>Why I’m using a separate layer for input data validation</title>
      <link>https://blog.liquidbytes.net/2015/11/why-im-using-a-separate-layer-for-input-data-validation/</link>
      <pubDate>Sat, 14 Nov 2015 13:23:03 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2015/11/why-im-using-a-separate-layer-for-input-data-validation/</guid>
      <description>While some developers seem to prefer to implement their user data validation rules directly in the model layer (or even worse, the ORM entity layer), this very often leads to problems as described by Stefan Priebsch in his blog post on How to Validate Data.

In addition to the many issues he mentioned, you should consider the following advantages of using a separate layer to validate user input data:</description>
    </item>
    
    <item>
      <title>Written requirements in the age of agile development</title>
      <link>https://blog.liquidbytes.net/2013/07/written-requirements-in-the-age-of-agile-development/</link>
      <pubDate>Sun, 14 Jul 2013 20:37:53 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2013/07/written-requirements-in-the-age-of-agile-development/</guid>
      <description>Many of today&amp;#8217;s agile software projects are characterized by a lack of written requirements and other documentation. The rationale behind this is that requirements change &amp;#8220;too often&amp;#8221; to be written down. Project management might also be afraid that writing documents consumes too much time of developers and stakeholders. However, my personal experience is that projects with clearly defined and written requirements run much smoother and have less delays. Written documents are forcing developers to think and clarify open issues before they start coding.</description>
    </item>
    
    <item>
      <title>Cargo Cult</title>
      <link>https://blog.liquidbytes.net/2013/04/cargo-cult/</link>
      <pubDate>Sat, 20 Apr 2013 11:51:21 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2013/04/cargo-cult/</guid>
      <description>If there is one work-related term that got stuck in my head it is &amp;#8220;cargo cult&amp;#8220;:
 In the South Seas there is a cargo cult of people. During the war they saw airplanes with lots of good materials, and they want the same thing to happen now. So they&amp;#8217;ve arranged to make things like runways, to put fires along the sides of the runways, to make a wooden hut for a man to sit in, with two wooden pieces on his head for headphones and bars of bamboo sticking out like antennas—he&amp;#8217;s the controller—and they wait for the airplanes to land.</description>
    </item>
    
    <item>
      <title>What to document in agile projects?</title>
      <link>https://blog.liquidbytes.net/2012/11/what-o-document-in-agile-projects/</link>
      <pubDate>Thu, 08 Nov 2012 16:49:38 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2012/11/what-o-document-in-agile-projects/</guid>
      <description>A posting in the Agile and Lean Software Development group on LinkedIn inspired me to think about the amount and type of documentation that should be created in agile projects. It is a misconception, if developers think that agile methods do not require any written documents. Here are a few (I think the most important) examples:
 A Wiki that contains the steps required to set up the application and a list of config files and config options can be considered essencial documentation &amp;#8211; especially for developers who join the project at a later time.</description>
    </item>
    
    <item>
      <title>David Parnas: Most of the software we see or buy is ugly</title>
      <link>https://blog.liquidbytes.net/2012/10/why-software-jewels-are-rare-parnas/</link>
      <pubDate>Sat, 27 Oct 2012 18:00:25 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2012/10/why-software-jewels-are-rare-parnas/</guid>
      <description>Nevertheless, in spite of such helpful articles and many textbooks on software design, software jewels remain rare. Most of the software we see or buy is ugly, unreliable, hard to change, and certainly not something that [Niklaus] Wirth or [Edsger] Dijkstra would admire. If published papers contain the secret of success for software, shouldn&amp;#8217;t we see more jewels?
David Lorge Parnas, Why Software Jewels Are Rare, IEEE Computer, February 1996</description>
    </item>
    
    <item>
      <title>Niklaus Wirth about complexity</title>
      <link>https://blog.liquidbytes.net/2012/10/niklaus-wirth-about-complexity/</link>
      <pubDate>Fri, 19 Oct 2012 17:14:23 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2012/10/niklaus-wirth-about-complexity/</guid>
      <description>On both sides of this fence, complexity has and will maintain a strong fascination for many people. It is true that we live in a complex world and strive to solve inherently complex problems, which often do require complex mechanisms. However, this should not diminish our desire for elegant solutions, which convince by their clarity and effectiveness. Simple, elegant solutions are more effective, but they are harder to find than complex ones, and they require more time, which we too often believe to be unaffordable.</description>
    </item>
    
    <item>
      <title>Howto: Become a great Software Engineer</title>
      <link>https://blog.liquidbytes.net/2012/10/howto-become-a-great-software-engineer/</link>
      <pubDate>Fri, 19 Oct 2012 10:26:46 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2012/10/howto-become-a-great-software-engineer/</guid>
      <description>After working in the industry for over a decade, this is my personal summary of the key elements for a successful and satisfying career as software engineer (and a reminder to myself):
 Contribute to open-source projects &amp;#8211; ideally applications or libraries you already use yourself. Don&amp;#8217;t blame me, if you end up &amp;#8220;working&amp;#8221; in your spare time. Read and understand The Risks Of Stopping Too Soon by David Parnas. Do your best not to stop too soon.</description>
    </item>
    
    <item>
      <title>Using SQL fixtures for database related unit tests</title>
      <link>https://blog.liquidbytes.net/2012/08/sql-fixtures-for-unit-tests/</link>
      <pubDate>Tue, 21 Aug 2012 11:19:03 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2012/08/sql-fixtures-for-unit-tests/</guid>
      <description>This is a short tutorial to show how to use fixtures for database related unit tests. The inspiration for this post came from a conversation I had at the recent PHP Unconference in Hamburg, Germany.
From my experience, the usual way to test database related classes is to use a special test database, that needs a reset before each run (drop the existing tables and import the test dump). That approach has several severe drawbacks, all observed in real life projects many, many times:</description>
    </item>
    
    <item>
      <title>Exceptions: Andrew Hunt/David Thomas vs Robert C. Martin</title>
      <link>https://blog.liquidbytes.net/2012/05/exceptions-andrew-hunt-vs-robert-c-martin/</link>
      <pubDate>Sat, 05 May 2012 09:56:12 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2012/05/exceptions-andrew-hunt-vs-robert-c-martin/</guid>
      <description>There is a subtle difference between what Robert C. Martin recommends in Clean Code and what Andrew Hunt / David Thomas recommend in The Pragmatic Programmer. Martin encourages you to always use exceptions if the normal program flow is interrupted to avoid if statements (or even worse: forgotten if statements and mixed result types) while Hunt/Thomas say this can cause harm (&amp;#8220;it&amp;#8217;s a kind of cascading goto&amp;#8221;) and should only be used if something truly unexpected happens (tip 34).</description>
    </item>
    
    <item>
      <title>About Passion</title>
      <link>https://blog.liquidbytes.net/2012/04/about-passion/</link>
      <pubDate>Fri, 27 Apr 2012 08:57:12 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2012/04/about-passion/</guid>
      <description>What does passion mean for a Software Engineer? Depends on the context. First, and that&amp;#8217;s what start-up companies usually expect from their employes, it means you love the company, the business idea and the team you work with. Some people are also passionate about their Apple computer/phone/tablet in a similar way (the term &amp;#8220;Fanboy&amp;#8221; is frequently used in Web forums to describe this behavior). *
Second, it can mean that you stay ahead of the curve and have strong opinions about how to do your job (independent from the company you&amp;#8217;re currently working for): For example, I&amp;#8217;m obsessed with clean code and unit tests.</description>
    </item>
    
    <item>
      <title>The Clean Coder</title>
      <link>https://blog.liquidbytes.net/2012/04/the-clean-coder/</link>
      <pubDate>Fri, 20 Apr 2012 10:50:32 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2012/04/the-clean-coder/</guid>
      <description>I&amp;#8217;m currently reading The Clean Coder by Robert C. Martin. Here are some of my favorite quotes:
Caffeine &amp;#8220;There is no doubt that some of us can make more efficient use of our focus-manna by consuming moderate amounts of caffeine. But take care. Caffeine also puts a strange jitter on our focus.&amp;#8221;
Arrogance &amp;#8220;Programmers tend to be arrogant, self-absorbed introverts.We didn&amp;#8217;t go into this business because we like people. Most of us got into programming because we prefer to deeply focus on sterile minutia, juggle lots of concepts simultaneously, and in general prove to ourselves that we have brains the size of a planet, all while not having to interact with the messy complexities of other people.</description>
    </item>
    
    <item>
      <title>Eclipse is not the solution!</title>
      <link>https://blog.liquidbytes.net/2012/04/updated-cccs-for-php-posting-eclipse-is-not-the-solution/</link>
      <pubDate>Tue, 17 Apr 2012 21:42:27 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2012/04/updated-cccs-for-php-posting-eclipse-is-not-the-solution/</guid>
      <description>During the last couple of days, I&amp;#8217;ve been updating my posting about cargo cult coding standards for PHP. There are some examples now. Thanks to Arturas Smorgun for retweeting it. I&amp;#8217;m sure my post doesn&amp;#8217;t have a huge impact on the community, but for me it&amp;#8217;s still worth talking about my experiences.
Guess what&amp;#8217;s bothering me the most is that the popular PEAR/Zend Framework coding standard actually forces you to lose the context of your currently edited code.</description>
    </item>
    
    <item>
      <title>Cargo Cult Coding Standards (CCCS) for PHP</title>
      <link>https://blog.liquidbytes.net/2012/04/cargo-cult-coding-standards-cccs-for-php/</link>
      <pubDate>Wed, 04 Apr 2012 18:50:37 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2012/04/cargo-cult-coding-standards-cccs-for-php/</guid>
      <description>Cargo cult means that you copy some (previously) successful behavior from others and expect something good to happen to you (or your project) as well. For coding standards, that&amp;#8217;s a very good starting point. Especially since formatting standards are often not based on any science &amp;#8211; life is just easier, if everyone is using the same formatting for source code and we all hate the discussions at the start of projects, when some junior developer tries to promote it&amp;#8217;s own fancy ideas.</description>
    </item>
    
    <item>
      <title>Guidelines for Software Development Estimation Effort / IEEE Computer</title>
      <link>https://blog.liquidbytes.net/2011/11/guidelines-for-software-development-estimation-effort-ieee-computer/</link>
      <pubDate>Thu, 17 Nov 2011 13:20:01 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2011/11/guidelines-for-software-development-estimation-effort-ieee-computer/</guid>
      <description>An analysis of 32 factors that influence the software development estimation accuracy can be found in Computer’s October issue (Dirk Basten, Ali Sunyaev, pp. 88-90).
In my opinion, these are the most important results:
 Try to exclude candidates with a high general degree of optimism as well as optimism in the estimation process Split larger tasks into smaller ones, which can usually be estimated more precisely Communicate frequently with the client to obtain direct feedback Estimator experience is one of the most important factors in archiving development effort estimation accuracy, although it&amp;#8217;s impractical to appoint the highest-qualified estimator on every project  </description>
    </item>
    
    <item>
      <title>Why good code sometimes needs redundancy: The dynamic aspects</title>
      <link>https://blog.liquidbytes.net/2010/12/good-code-sometimes-needs-redundancy-the-dynamic-aspects/</link>
      <pubDate>Sat, 11 Dec 2010 15:15:09 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2010/12/good-code-sometimes-needs-redundancy-the-dynamic-aspects/</guid>
      <description>Introduction There is a general rule in software development, which says you should avoid duplicated code and data. This is extremely simple to remember and many developers love to quote it. Popular code quality assessment tools use it as a metric. Because this rule sounds so inerrable, it is applied even in cases, where it is not appropriate for one or more reasons.
Another well-known fact is that inexperienced developers like to duplicate everything using copy &amp;amp; paste, which causes a lot of maintenance overhead afterwards.</description>
    </item>
    
    <item>
      <title>Notification Free PHP Coding</title>
      <link>https://blog.liquidbytes.net/2010/08/notification-free-php-coding/</link>
      <pubDate>Fri, 20 Aug 2010 14:23:22 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2010/08/notification-free-php-coding/</guid>
      <description>This is a reply to http://100days.de/serendipity/archives/50-Notification-Free-PHP-Coding.html. Gaylord Aulke&amp;#8217;s opinions are normally quite valuable. There are a couple of arguments (just read the comments) in both directions and to be fair, Gaylord also said, that his opinion is different for frameworks and libraries.
Even though I tend look into PHP notifications (some code produces so much of them, that you can only ignore them), I wasn&amp;#8217;t really sure what my final position on Notification Free PHP Coding is and I was not too strict about it.</description>
    </item>
    
    <item>
      <title>The Perfect Development Environment</title>
      <link>https://blog.liquidbytes.net/2010/08/the-perfect-development-environment/</link>
      <pubDate>Fri, 20 Aug 2010 06:49:38 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2010/08/the-perfect-development-environment/</guid>
      <description>This is a reply to http://thinkvitamin.com/dev/the-perfect-development-environment/
Work Setting I prefer to be alone, with no one walking around, having conversations on the phone or asking questions. And yes, barking dogs are bad while you try to focus on source code^^
If people can not keep their mouth shut, loud music helps a lot. Use the headphones, whenever other people are around.
If you do an on-site consulting job, better not keep the client from asking questions though: This is what he (or she) pays for!</description>
    </item>
    
    <item>
      <title>It’s really hard to talk about JavaScript best practices and JMVC</title>
      <link>https://blog.liquidbytes.net/2010/07/its-really-hard-to-talk-about-javascript-best-practices-and-jmvc/</link>
      <pubDate>Thu, 15 Jul 2010 09:36:32 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2010/07/its-really-hard-to-talk-about-javascript-best-practices-and-jmvc/</guid>
      <description>I was totally enthusiastic, when I first learned about JavaScriptMVC &amp;#8211; because it brings all the best practices you are accustomed to into the JavaScript world. That means the MVC architecture, Object-oriented development with simulated inheritance, EJS templates, easy testing, OpenAjax support, powerful event delegation and so on.
However, I often have a hard time to convince other developers about those advantages. I guess testing is the easiest one, because no developer would dare to argue against testing, even though many developers don&amp;#8217;t do it or don&amp;#8217;t do it right.</description>
    </item>
    
    <item>
      <title>Ihr habt das Scrum falsch gemacht!</title>
      <link>https://blog.liquidbytes.net/2010/05/ihr-habt-das-scrum-falsch-gemacht/</link>
      <pubDate>Mon, 03 May 2010 12:11:46 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2010/05/ihr-habt-das-scrum-falsch-gemacht/</guid>
      <description>Das PHP BarCamp in Salzburg dieses Wochenende war super. Herzlichen Dank an Evelyne Selak, die scheinbar die Organisation zum Großteil auf sich gezogen hat. Ich könnte sowas nicht leisten und hätte Angst, dass Hotel &amp;amp; Sponsoren absagen und niemand kommt.
Nett fand ich mal wieder Sebastian Bergmanns Vorstellungen zu testbarer Software zu hören. Im Wesentlichen basierte seine Argumentation in letzter Konsequenz auch auf „_man will ja dieses und darum muss man jenes so und so machen_“.</description>
    </item>
    
    <item>
      <title>Does the status of a developer matter to you?</title>
      <link>https://blog.liquidbytes.net/2009/09/does-the-status-of-a-developer-matter-to-you/</link>
      <pubDate>Mon, 21 Sep 2009 09:41:25 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2009/09/does-the-status-of-a-developer-matter-to-you/</guid>
      <description>Good morning^^
I feel &amp;#8220;angry&amp;#8221; about the IT community drifting away from each other. There are the hard-core professionals working on enterprise-scale projects, then there are the employed software engineers working at companies like Google or IBM, and last but not least there is an in-homogenous group consisting of Open Source developers, book authors, bloggers, and technology evangelists. In the past, the gap between those groups was not that important, as the market was small and the technology less complex.</description>
    </item>
    
    <item>
      <title>Do not</title>
      <link>https://blog.liquidbytes.net/2009/02/do-not/</link>
      <pubDate>Wed, 18 Feb 2009 13:50:51 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2009/02/do-not/</guid>
      <description>reverse_and_create : function(files){ var sorted = [], instances =[]; for(var id in files){ sorted.push(files[id]) } for(var i = 0; i &amp;lt; sorted.length; i++){ if (sorted[i].id) { instances.push(this.create_as_existing(sorted[i])); } } return instances; }, do_not_reverse_and_create : function(files){ if(files != undefined){ var instances =[]; for(var i = 0; i &amp;lt; files.length; i++){ if (files[i].id) { instances.push(this.create_as_existing(files[i])); } } return instances; } }  What a shame!</description>
    </item>
    
    <item>
      <title>Validation in the MVC design pattern</title>
      <link>https://blog.liquidbytes.net/2009/01/validation-in-the-mvc-design-pattern/</link>
      <pubDate>Mon, 05 Jan 2009 22:38:06 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2009/01/validation-in-the-mvc-design-pattern/</guid>
      <description>Hello Martin,
your article on Notification implies that validation should be done in
the Model layer. There are numerous voices that see the need for
validation in the Controller, as it receives user input in the first
place. I argue that actually both should be done in Web applications:
&amp;#8211; First you want to make sure that data integrity is given. You should
not outsource this essential task to the Controller or the View.</description>
    </item>
    
  </channel>
</rss>