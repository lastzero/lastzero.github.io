<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ieee on Liquid Bytes</title>
    <link>https://blog.liquidbytes.net/categories/ieee/</link>
    <description>Recent content in Ieee on Liquid Bytes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>You are free to share if you link back to this blog</copyright>
    <lastBuildDate>Wed, 10 Apr 2013 21:58:13 +0000</lastBuildDate>
    
	<atom:link href="https://blog.liquidbytes.net/categories/ieee/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What Architecture Means for Agile Development</title>
      <link>https://blog.liquidbytes.net/2013/04/what-architecture-means-for-agile-development/</link>
      <pubDate>Wed, 10 Apr 2013 21:58:13 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2013/04/what-architecture-means-for-agile-development/</guid>
      <description>In contrast to some discussions we observe in the software community, agile development is not about cargo cult adoption of Scrum or any other process, toolkit, or methodology — although we certainly observe this and consider it a problem. The essence of agility is responsiveness, learning, and sufficiency. Agility is reflected in sustainability and quality in software and its development — by definition, unsustainable and poor-quality development contradict and reduce agility.</description>
    </item>
    
    <item>
      <title>Is your team really agile?</title>
      <link>https://blog.liquidbytes.net/2012/11/is-your-team-really-agile/</link>
      <pubDate>Fri, 09 Nov 2012 23:19:52 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2012/11/is-your-team-really-agile/</guid>
      <description> Most teams purporting to be doing agile software development are not applying the level of technical rigor necessary to succeed at it. Most “agile” teams have actually only adopted Scrum’s project-management practices and have failed to effectively adopt “the hard disciplines” like test-driven development, refactoring, pair programming, simple design, and continuous integration.
Jean-Raymond Abrial, Faultless systems: Yes we can!, IEEE Computer 9&amp;frasl;2009
 </description>
    </item>
    
    <item>
      <title>Google’s Sean Quinlan about GMail and GFS</title>
      <link>https://blog.liquidbytes.net/2011/11/googles-sean-quinlan-about-gmail-and-gfs/</link>
      <pubDate>Fri, 18 Nov 2011 16:57:24 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2011/11/googles-sean-quinlan-about-gmail-and-gfs/</guid>
      <description>I recently read an interview with Google&amp;#8217;s Sean Quinlan about GFS and the problems they faced with interactive Web applications like GMail, which require a certain maximum latency time. The original Google File System design was focused on batch efficiency, not latency. Although the interview is quite long, there are two remarkable paragraphs I would like to quote:
 There&amp;#8217;s no question that GFS faces many challenges now. For one thing, the awkwardness of supporting an ever-growing fleet of user-facing, latency sensitive applications on top of a system initially designed for batch-system throughput is something that&amp;#8217;s obvious to all.</description>
    </item>
    
    <item>
      <title>Combining SOA and Cloud Computing</title>
      <link>https://blog.liquidbytes.net/2011/11/combining-soa-and-cloud-computing/</link>
      <pubDate>Thu, 17 Nov 2011 13:40:59 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2011/11/combining-soa-and-cloud-computing/</guid>
      <description>To my surprise, the combination of SOA (Service-oriented Architecture) and Cloud Computing (basically outsourcing the server management/using many virtual machines) was described as something new in IEEE Computer&amp;#8217;s October issue (&amp;#8220;Software Engineering Meets Services and Cloud Computing&amp;#8221;, Stephen S . Yau and Ho G. An, pp. 47 &amp;#8211; 53).
Besides the fact, that this is nothing new, but an ongoing trend that started a couple of years ago, there are three observations I&amp;#8217;l like to share:</description>
    </item>
    
    <item>
      <title>Guidelines for Software Development Estimation Effort / IEEE Computer</title>
      <link>https://blog.liquidbytes.net/2011/11/guidelines-for-software-development-estimation-effort-ieee-computer/</link>
      <pubDate>Thu, 17 Nov 2011 13:20:01 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2011/11/guidelines-for-software-development-estimation-effort-ieee-computer/</guid>
      <description>An analysis of 32 factors that influence the software development estimation accuracy can be found in Computer’s October issue (Dirk Basten, Ali Sunyaev, pp. 88-90).
In my opinion, these are the most important results:
 Try to exclude candidates with a high general degree of optimism as well as optimism in the estimation process Split larger tasks into smaller ones, which can usually be estimated more precisely Communicate frequently with the client to obtain direct feedback Estimator experience is one of the most important factors in archiving development effort estimation accuracy, although it&amp;#8217;s impractical to appoint the highest-qualified estimator on every project  </description>
    </item>
    
    <item>
      <title>Shades of the Singularity (IEEE Spectrum 12.10)</title>
      <link>https://blog.liquidbytes.net/2011/03/shades-of-the-singularity-ieee-spectrum-12-10/</link>
      <pubDate>Mon, 28 Feb 2011 23:07:10 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2011/03/shades-of-the-singularity-ieee-spectrum-12-10/</guid>
      <description>In IEEE Spectrum 12.10 you find an article about building &amp;#8220;The brain of a New Machine&amp;#8221; using Memristors by Versace &amp;amp; Chandler. Bottom line is that they expect that a new memory technology built on the Memristor chips produced by HP Labs enables them to construct massive-parallel computers that consume only a comparable small amount of energy. While this might be the case, the article does not really answer the question how the software that runs on that hardware looks like.</description>
    </item>
    
  </channel>
</rss>