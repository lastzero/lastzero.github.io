<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Performance Amp Security on Liquid Bytes - Software Engineering &amp; Management Blog</title>
    <link>https://blog.liquidbytes.net/categories/performance-amp-security/</link>
    <description>Recent content in Performance Amp Security on Liquid Bytes - Software Engineering &amp; Management Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>You are free to share if you link back</copyright>
    <lastBuildDate>Wed, 22 Aug 2012 10:09:39 +0000</lastBuildDate>
    
	<atom:link href="https://blog.liquidbytes.net/categories/performance-amp-security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Storing historized data in a relational database</title>
      <link>https://blog.liquidbytes.net/2012/08/storing-historized-data-in-a-relational-database/</link>
      <pubDate>Wed, 22 Aug 2012 10:09:39 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2012/08/storing-historized-data-in-a-relational-database/</guid>
      <description>There are quite a few concepts that deal with storing historized data in a relational database; that means creating an archive copy or journal when data is updated or deleted.
Spontaneously, these options come into my mind:
 Using the built-in functionality (for example, in the latest Oracle database).  Using black-box technology is dangerous, if you don&amp;#8217;t understand it. It might also be hard to customize for your own needs.</description>
    </item>
    
  </channel>
</rss>