<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quotes on Liquid Bytes</title>
    <link>https://blog.liquidbytes.net/categories/quotes/</link>
    <description>Recent content in Quotes on Liquid Bytes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>You are free to share if you link back to this blog</copyright>
    <lastBuildDate>Wed, 10 Apr 2013 21:58:13 +0000</lastBuildDate>
    
	<atom:link href="https://blog.liquidbytes.net/categories/quotes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What Architecture Means for Agile Development</title>
      <link>https://blog.liquidbytes.net/2013/04/what-architecture-means-for-agile-development/</link>
      <pubDate>Wed, 10 Apr 2013 21:58:13 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2013/04/what-architecture-means-for-agile-development/</guid>
      <description>In contrast to some discussions we observe in the software community, agile development is not about cargo cult adoption of Scrum or any other process, toolkit, or methodology — although we certainly observe this and consider it a problem. The essence of agility is responsiveness, learning, and sufficiency. Agility is reflected in sustainability and quality in software and its development — by definition, unsustainable and poor-quality development contradict and reduce agility.</description>
    </item>
    
    <item>
      <title>Is your team really agile?</title>
      <link>https://blog.liquidbytes.net/2012/11/is-your-team-really-agile/</link>
      <pubDate>Fri, 09 Nov 2012 23:19:52 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2012/11/is-your-team-really-agile/</guid>
      <description> Most teams purporting to be doing agile software development are not applying the level of technical rigor necessary to succeed at it. Most “agile” teams have actually only adopted Scrum’s project-management practices and have failed to effectively adopt “the hard disciplines” like test-driven development, refactoring, pair programming, simple design, and continuous integration.
Jean-Raymond Abrial, Faultless systems: Yes we can!, IEEE Computer 9&amp;frasl;2009
 </description>
    </item>
    
    <item>
      <title>David Parnas: Most of the software we see or buy is ugly</title>
      <link>https://blog.liquidbytes.net/2012/10/why-software-jewels-are-rare-parnas/</link>
      <pubDate>Sat, 27 Oct 2012 18:00:25 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2012/10/why-software-jewels-are-rare-parnas/</guid>
      <description>Nevertheless, in spite of such helpful articles and many textbooks on software design, software jewels remain rare. Most of the software we see or buy is ugly, unreliable, hard to change, and certainly not something that [Niklaus] Wirth or [Edsger] Dijkstra would admire. If published papers contain the secret of success for software, shouldn&amp;#8217;t we see more jewels?
David Lorge Parnas, Why Software Jewels Are Rare, IEEE Computer, February 1996</description>
    </item>
    
    <item>
      <title>Niklaus Wirth about complexity</title>
      <link>https://blog.liquidbytes.net/2012/10/niklaus-wirth-about-complexity/</link>
      <pubDate>Fri, 19 Oct 2012 17:14:23 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2012/10/niklaus-wirth-about-complexity/</guid>
      <description>On both sides of this fence, complexity has and will maintain a strong fascination for many people. It is true that we live in a complex world and strive to solve inherently complex problems, which often do require complex mechanisms. However, this should not diminish our desire for elegant solutions, which convince by their clarity and effectiveness. Simple, elegant solutions are more effective, but they are harder to find than complex ones, and they require more time, which we too often believe to be unaffordable.</description>
    </item>
    
  </channel>
</rss>