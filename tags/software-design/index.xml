<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Design on Liquid Bytes - Software Engineering &amp; Management Blog</title>
    <link>https://blog.liquidbytes.net/tags/software-design/</link>
    <description>Recent content in Software Design on Liquid Bytes - Software Engineering &amp; Management Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>You are free to share</copyright>
    <lastBuildDate>Sat, 11 Dec 2010 15:15:09 +0000</lastBuildDate>
    
	<atom:link href="https://blog.liquidbytes.net/tags/software-design/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Why good code sometimes needs redundancy: The dynamic aspects</title>
      <link>https://blog.liquidbytes.net/2010/12/good-code-sometimes-needs-redundancy-the-dynamic-aspects/</link>
      <pubDate>Sat, 11 Dec 2010 15:15:09 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2010/12/good-code-sometimes-needs-redundancy-the-dynamic-aspects/</guid>
      <description>Introduction There is a general rule in software development, which says you should avoid duplicated code and data. This is extremely simple to remember and many developers love to quote it. Popular code quality assessment tools use it as a metric. Because this rule sounds so inerrable, it is applied even in cases, where it is not appropriate for one or more reasons.
Another well-known fact is that inexperienced developers like to duplicate everything using copy &amp;amp; paste, which causes a lot of maintenance overhead afterwards.</description>
    </item>
    
  </channel>
</rss>