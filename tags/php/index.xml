<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on Liquid Bytes - Software Engineering &amp; Management Blog</title>
    <link>https://blog.liquidbytes.net/tags/php/</link>
    <description>Recent content in Php on Liquid Bytes - Software Engineering &amp; Management Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>You are free to share if you link back to this blog</copyright>
    <lastBuildDate>Tue, 21 Aug 2012 11:19:03 +0000</lastBuildDate>
    
	<atom:link href="https://blog.liquidbytes.net/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using SQL fixtures for database related unit tests</title>
      <link>https://blog.liquidbytes.net/2012/08/sql-fixtures-for-unit-tests/</link>
      <pubDate>Tue, 21 Aug 2012 11:19:03 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2012/08/sql-fixtures-for-unit-tests/</guid>
      <description>This is a short tutorial to show how to use fixtures for database related unit tests. The inspiration for this post came from a conversation I had at the recent PHP Unconference in Hamburg, Germany.
From my experience, the usual way to test database related classes is to use a special test database, that needs a reset before each run (drop the existing tables and import the test dump). That approach has several severe drawbacks, all observed in real life projects many, many times:</description>
    </item>
    
    <item>
      <title>Wunderkit and the 6Wunderkinder – 8 months later</title>
      <link>https://blog.liquidbytes.net/2012/04/wunderkit-and-the-6wunderkinder-8-months-later/</link>
      <pubDate>Thu, 26 Apr 2012 14:55:55 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2012/04/wunderkit-and-the-6wunderkinder-8-months-later/</guid>
      <description>As you can see on my Linkedin profile, I used to work as consultant for 6Wunderkinder, a Berlin based start-up company, last year. My job was to provide training for the developers and help building the initial Web frontend for Wunderkit, their next product after the popular Wunderlist app. Even though I could say a lot about what I liked and didn&amp;#8217;t like about any company I worked with, I&amp;#8217;m never disclosing internal details.</description>
    </item>
    
    <item>
      <title>Eclipse is not the solution!</title>
      <link>https://blog.liquidbytes.net/2012/04/updated-cccs-for-php-posting-eclipse-is-not-the-solution/</link>
      <pubDate>Tue, 17 Apr 2012 21:42:27 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2012/04/updated-cccs-for-php-posting-eclipse-is-not-the-solution/</guid>
      <description>During the last couple of days, I&amp;#8217;ve been updating my posting about cargo cult coding standards for PHP. There are some examples now. Thanks to Arturas Smorgun for retweeting it. I&amp;#8217;m sure my post doesn&amp;#8217;t have a huge impact on the community, but for me it&amp;#8217;s still worth talking about my experiences.
Guess what&amp;#8217;s bothering me the most is that the popular PEAR/Zend Framework coding standard actually forces you to lose the context of your currently edited code.</description>
    </item>
    
    <item>
      <title>Cargo Cult Coding Standards (CCCS) for PHP</title>
      <link>https://blog.liquidbytes.net/2012/04/cargo-cult-coding-standards-cccs-for-php/</link>
      <pubDate>Wed, 04 Apr 2012 18:50:37 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2012/04/cargo-cult-coding-standards-cccs-for-php/</guid>
      <description>Cargo cult means that you copy some (previously) successful behavior from others and expect something good to happen to you (or your project) as well. For coding standards, that&amp;#8217;s a very good starting point. Especially since formatting standards are often not based on any science &amp;#8211; life is just easier, if everyone is using the same formatting for source code and we all hate the discussions at the start of projects, when some junior developer tries to promote it&amp;#8217;s own fancy ideas.</description>
    </item>
    
    <item>
      <title>Git: A hellish nightmare!</title>
      <link>https://blog.liquidbytes.net/2011/05/git-a-hellish-nightmare/</link>
      <pubDate>Wed, 04 May 2011 15:52:10 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2011/05/git-a-hellish-nightmare/</guid>
      <description>Even though I am the master of procrastination, I managed to fix 3 issues in flot (JS charting plugin for jQuery) and PHPUnit this week. Of course they are hosted on github and everyone who knows me, knows that I hate git because it is sooo different from svn and my brain frequently explodes when I see all the branches and connections between them. Every time I try to explain that to more or less experienced git users, they try to convince me from the opposite.</description>
    </item>
    
    <item>
      <title>Chaotic Pattern: Wiki is online</title>
      <link>https://blog.liquidbytes.net/2010/11/chaotic-pattern-wiki-is-online/</link>
      <pubDate>Mon, 01 Nov 2010 21:06:45 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2010/11/chaotic-pattern-wiki-is-online/</guid>
      <description>I recently managed to publish my latest project:
chaoticpattern.net
While reading the book Sync, I felt that this is the right name &amp;#8211; an explanation can be found on the Web site. There is already some blog with the same name, but it does not seem to be very active. The last post is from May 2009. Hope I don&amp;#8217;t cause any confusion.
Chaotic Pattern will be used as an incubator/lab.</description>
    </item>
    
    <item>
      <title>Notification Free PHP Coding</title>
      <link>https://blog.liquidbytes.net/2010/08/notification-free-php-coding/</link>
      <pubDate>Fri, 20 Aug 2010 14:23:22 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2010/08/notification-free-php-coding/</guid>
      <description>This is a reply to http://100days.de/serendipity/archives/50-Notification-Free-PHP-Coding.html. Gaylord Aulke&amp;#8217;s opinions are normally quite valuable. There are a couple of arguments (just read the comments) in both directions and to be fair, Gaylord also said, that his opinion is different for frameworks and libraries.
Even though I tend look into PHP notifications (some code produces so much of them, that you can only ignore them), I wasn&amp;#8217;t really sure what my final position on Notification Free PHP Coding is and I was not too strict about it.</description>
    </item>
    
    <item>
      <title>AWF-CMS.org online again</title>
      <link>https://blog.liquidbytes.net/2010/08/awf-cms-org-online-again/</link>
      <pubDate>Sun, 15 Aug 2010 19:03:46 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2010/08/awf-cms-org-online-again/</guid>
      <description>Ha, after almost 3 years, the home page of my (so far) biggest Open Source project AWF-CMS is online again. When I started working for Zend in 2006&amp;frasl;2007, I felt the need to write a version that is based on Zend Framework. Of course I was busy with my customer projects, so that never happened. Even worse, due to a server upgrade, the configuration for the AWF Web site was broken and I didn&amp;#8217;t even find the time to fix that until today.</description>
    </item>
    
    <item>
      <title>It’s really hard to talk about JavaScript best practices and JMVC</title>
      <link>https://blog.liquidbytes.net/2010/07/its-really-hard-to-talk-about-javascript-best-practices-and-jmvc/</link>
      <pubDate>Thu, 15 Jul 2010 09:36:32 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2010/07/its-really-hard-to-talk-about-javascript-best-practices-and-jmvc/</guid>
      <description>I was totally enthusiastic, when I first learned about JavaScriptMVC &amp;#8211; because it brings all the best practices you are accustomed to into the JavaScript world. That means the MVC architecture, Object-oriented development with simulated inheritance, EJS templates, easy testing, OpenAjax support, powerful event delegation and so on.
However, I often have a hard time to convince other developers about those advantages. I guess testing is the easiest one, because no developer would dare to argue against testing, even though many developers don&amp;#8217;t do it or don&amp;#8217;t do it right.</description>
    </item>
    
    <item>
      <title>Ihr habt das Scrum falsch gemacht!</title>
      <link>https://blog.liquidbytes.net/2010/05/ihr-habt-das-scrum-falsch-gemacht/</link>
      <pubDate>Mon, 03 May 2010 12:11:46 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2010/05/ihr-habt-das-scrum-falsch-gemacht/</guid>
      <description>Das PHP BarCamp in Salzburg dieses Wochenende war super. Herzlichen Dank an Evelyne Selak, die scheinbar die Organisation zum Großteil auf sich gezogen hat. Ich könnte sowas nicht leisten und hätte Angst, dass Hotel &amp;amp; Sponsoren absagen und niemand kommt.
Nett fand ich mal wieder Sebastian Bergmanns Vorstellungen zu testbarer Software zu hören. Im Wesentlichen basierte seine Argumentation in letzter Konsequenz auch auf „_man will ja dieses und darum muss man jenes so und so machen_“.</description>
    </item>
    
    <item>
      <title>Simple is hard</title>
      <link>https://blog.liquidbytes.net/2008/09/simple-is-hard/</link>
      <pubDate>Thu, 04 Sep 2008 19:31:21 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2008/09/simple-is-hard/</guid>
      <description>Check out these slides by Rasmus Lerdorf presented at FrOSCon 2008:
http://talks.php.net/show/froscon08
Yes, PHP frameworks do suck in terms of performance. CakePHP is the slowest while Zend Framework seems to be the most complex, in terms of include dependencies.</description>
    </item>
    
  </channel>
</rss>