<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sql on Liquid Bytes - Software Engineering &amp; Management Blog</title>
    <link>https://blog.liquidbytes.net/tags/sql/</link>
    <description>Recent content in Sql on Liquid Bytes - Software Engineering &amp; Management Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>You are free to share</copyright>
    <lastBuildDate>Wed, 22 Aug 2012 10:09:39 +0000</lastBuildDate>
    
	<atom:link href="https://blog.liquidbytes.net/tags/sql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Storing historized data in a relational database</title>
      <link>https://blog.liquidbytes.net/2012/08/storing-historized-data-in-a-relational-database/</link>
      <pubDate>Wed, 22 Aug 2012 10:09:39 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2012/08/storing-historized-data-in-a-relational-database/</guid>
      <description>There are quite a few concepts that deal with storing historized data in a relational database; that means creating an archive copy or journal when data is updated or deleted.
Spontaneously, these options come into my mind:
 Using the built-in functionality (for example, in the latest Oracle database).  Using black-box technology is dangerous, if you don&amp;#8217;t understand it. It might also be hard to customize for your own needs.</description>
    </item>
    
    <item>
      <title>Using SQL fixtures for database related unit tests</title>
      <link>https://blog.liquidbytes.net/2012/08/sql-fixtures-for-unit-tests/</link>
      <pubDate>Tue, 21 Aug 2012 11:19:03 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2012/08/sql-fixtures-for-unit-tests/</guid>
      <description>This is a short tutorial to show how to use fixtures for database related unit tests. The inspiration for this post came from a conversation I had at the recent PHP Unconference in Hamburg, Germany.
From my experience, the usual way to test database related classes is to use a special test database, that needs a reset before each run (drop the existing tables and import the test dump). That approach has several severe drawbacks, all observed in real life projects many, many times:</description>
    </item>
    
    <item>
      <title>Updated version of Zend_Db_Adapter_Odbtp_Mssql</title>
      <link>https://blog.liquidbytes.net/2008/05/updated-version-of-zend_db_adapter_odbtp_mssql/</link>
      <pubDate>Mon, 19 May 2008 14:16:08 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2008/05/updated-version-of-zend_db_adapter_odbtp_mssql/</guid>
      <description>As people start asking me about that ODBTP adapter for Zend Framework, I will publish it as attachment to this post now. It should work with the latest version of Zend Framework (as reported by a developer). If you want to use it, just copy the files to your include path (make sure the path comes before the ZF path). Of course, you need to install ODBTP as well and add extension=php_odbtp_mssql.</description>
    </item>
    
    <item>
      <title>Switched from Drupal 5 to WordPress 2.5</title>
      <link>https://blog.liquidbytes.net/2008/04/switched-from-drupal-5-to-wordpress-2/</link>
      <pubDate>Wed, 30 Apr 2008 11:37:27 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2008/04/switched-from-drupal-5-to-wordpress-2/</guid>
      <description>After having trouble with the Drupal upgrade I decided to give WordPress a try. The funny thing is to copy the existing posts to the new tables. If you got the same problem, you can use this view:
 CREATE VIEW wp_import AS SELECT a.nid AS ID, 1 AS post_author, FROM_UNIXTIME(a.created) AS post_date, FROM_UNIXTIME(a.created) AS post_date_gmt, b.body AS post_content, b.title AS post_title, 0 AS post_category, b.teaser AS post_except, &amp;#8216;publish&amp;#8217; AS post_status, &amp;#8216;open&amp;#8217; AS comment_status, &amp;#8216;open&amp;#8217; AS ping_status, &amp;#8221; AS post_password, &amp;#8216;post&amp;#8217; + a.</description>
    </item>
    
    <item>
      <title>Comma separated list in SQL</title>
      <link>https://blog.liquidbytes.net/2007/10/755/</link>
      <pubDate>Sat, 06 Oct 2007 06:42:21 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2007/10/755/</guid>
      <description>Just a short example of how to write a stored function that returns a comma separated list of values (Microsoft Transact-SQL):
CREATE FUNCION get_authors (@pubId int) RETURNS nvarchar(max) WITH EXECUTE AS CALLER AS BEGIN DECLARE @authorList nvarchar(max); SELECT @authorList = @authorList + &#39;, &#39; + authorFirstName + &#39; &#39; + authorLastName FROM pdb_authors a, pdb_publicationAuthors b WHERE a.authorId = b.authorId AND b.pubId = @pubId; RETURN(SUBSTRING(@authorList, 3, LEN(@authorList) - 2)) END </description>
    </item>
    
    <item>
      <title>Optimizing SQL – Part 1</title>
      <link>https://blog.liquidbytes.net/2007/09/multi-lingual-sql/</link>
      <pubDate>Tue, 18 Sep 2007 15:37:42 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2007/09/multi-lingual-sql/</guid>
      <description>Design approaches for multi-lingual data In this example, we&amp;#8217;re assuming a dataset consisting of 6 multi-lingual fields. Each field holds strings with an average length of 200 characters in the 4 locales en, de, zh and ru. A fallback function is implemented using the CASE expression (doesn&amp;#8217;t add much overhead and is faster than fetching data in two locales and implementing the fallback at application level).
This is how your queries will look like, if you use the &amp;#8220;dictionary approach&amp;#8221; (master data in dict_books and locale specific strings in the general table dict_dictionary, which is shared between all master tables):</description>
    </item>
    
    <item>
      <title>Fun with SQL</title>
      <link>https://blog.liquidbytes.net/2007/06/cte-sql/</link>
      <pubDate>Fri, 08 Jun 2007 10:02:02 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2007/06/cte-sql/</guid>
      <description>I had heaps of fun with SQL today (again). Ever heard of Common Table Expressions? Here is an example of a recursive query:
WITH nodeCTE (nodeId, nodeName) AS ( SELECT a.nodeId, nodeName = CONVERT(varchar(8000), nodeName) FROM nodeNames a JOIN nodes b ON a.nodeId = b.nodeId AND a.locale = &#39;en&#39; AND b.parentId = 0 UNION ALL SELECT y.nodeId, x.nodeName + &#39; -&amp;gt; &#39; + CONVERT(varchar(8000), z.nodeName) FROM nodeCTE x JOIN nodes y ON y.</description>
    </item>
    
    <item>
      <title>Zend Framework: Unicode DB adapter for SQL Server</title>
      <link>https://blog.liquidbytes.net/2007/05/odbtp-adapter-zend-framework/</link>
      <pubDate>Thu, 31 May 2007 13:26:06 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2007/05/odbtp-adapter-zend-framework/</guid>
      <description>Yeah, I finally got it managed to publish my proposal for the Zend Framwork ODBTP database adapter component:
http://framework.zend.com/wiki/display/ZFPROP/Zend_Db_Adapter_Odbtp_Mssql
The default MS SQL database driver does not work with Unicode, as SQL Server expects Unicode strings in the UCS-2 encoding (UCS-2 contains null bytes and the driver is not binary-safe). ODBTP works as layer between PHP and SQL Server and accepts Unicode strings in the UTF-8 encoding.
The required classes are attached bellow.</description>
    </item>
    
    <item>
      <title>Country list as MySQL dump</title>
      <link>https://blog.liquidbytes.net/2006/11/countries-mysql-dump/</link>
      <pubDate>Fri, 10 Nov 2006 14:18:39 +0000</pubDate>
      
      <guid>https://blog.liquidbytes.net/2006/11/countries-mysql-dump/</guid>
      <description>I just imported a list of all countries from a CSV file and re-exported it as (My)SQL dump:
http://www.nulldevice.de/wp-content/uploads/2008/04/countries.sql
Feel free to download and use it! An even more complete list (including TLDs etc) will follow&amp;#8230;</description>
    </item>
    
  </channel>
</rss>